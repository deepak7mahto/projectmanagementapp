// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// ===== ENUMS =====
enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  MEMBER
  ADMIN
}

// ===== AUTHENTICATION MODELS (NextAuth) =====
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== APPLICATION MODELS =====
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Authentication Relations
  accounts      Account[]
  sessions      Session[]
  
  // Project Relations
  ownedProjects Project[]       @relation("ProjectOwner")
  memberships   ProjectMember[]
  
  // Task Relations
  createdTasks    Task[]            @relation("TaskCreator")
  assignedTasks   TaskAssignment[]
  assignedTasksBy TaskAssignment[] @relation("TaskAssigner")
  comments        Comment[]
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  ownerId     String
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  tags        Tag[]

}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id])
  createdById String
  createdBy   User            @relation("TaskCreator", fields: [createdById], references: [id])
  assignees   TaskAssignment[]
  comments    Comment[]
  tags        TaskTag[]
}

model TaskAssignment {
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  assignedAt  DateTime @default(now())
  assignedById String
  assignedBy  User     @relation("TaskAssigner", fields: [assignedById], references: [id])


  @@id([taskId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  taskId    String
  task      Task   @relation(fields: [taskId], references: [id])
  authorId  String
  author    User   @relation(fields: [authorId], references: [id])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#808080")
  
  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  tasks     TaskTag[]
  
  @@unique([name, projectId])
}

model TaskTag {
  taskId String
  task   Task @relation(fields: [taskId], references: [id])
  tagId  String
  tag    Tag  @relation(fields: [tagId], references: [id])


  @@id([taskId, tagId])
}

model ProjectMember {
  projectId String
  project   Project    @relation(fields: [projectId], references: [id])
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime   @default(now())


  @@id([projectId, userId])
}
