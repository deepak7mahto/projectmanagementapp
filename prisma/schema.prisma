generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  comments        Comment[]
  ownedProjects   Project[]        @relation("ProjectOwner")
  memberships     ProjectMember[]
  sessions        Session[]
  createdTasks    Task[]           @relation("TaskCreator")
  assignedTasksBy TaskAssignment[] @relation("TaskAssigner")
  assignedTasks   TaskAssignment[]
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus   @default(ACTIVE)
  startDate   DateTime?
  dueDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ownerId     String
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tags        Tag[]
  tasks       Task[]
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String?
  status      TaskStatus       @default(TODO)
  priority    Priority         @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  projectId   String
  createdById String
  comments    Comment[]
  createdBy   User             @relation("TaskCreator", fields: [createdById], references: [id])
  project     Project          @relation(fields: [projectId], references: [id])
  assignees   TaskAssignment[]
  tags        TaskTag[]
}

model TaskAssignment {
  taskId       String
  userId       String
  assignedAt   DateTime @default(now())
  assignedById String
  assignedBy   User     @relation("TaskAssigner", fields: [assignedById], references: [id])
  task         Task     @relation(fields: [taskId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@id([taskId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String    @default("#808080")
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  tasks     TaskTag[]

  @@unique([name, projectId])
}

model TaskTag {
  taskId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])

  @@id([taskId, tagId])
}

model ProjectMember {
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  MEMBER
  ADMIN
}
